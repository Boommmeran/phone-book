{"version":3,"file":"static/js/22.d8d6694d.chunk.js","mappings":"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","sources":["redux/filter/selectors.js","redux/contacts/selectors.js","components/ContactsForm/ContactsForm.styled.jsx","components/ContactsForm/ContactsForm.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Error/Error.styled.jsx","components/Error/Error.jsx","pages/ContactsPage/ContactsPage.styled.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const selectFilter = state => state.filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  max-width: 300px;\n  margin: 0 auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  color: #0055b3;\n  font-weight: bold;\n  margin-bottom: 15px;\n`;\n\nexport const Input = styled(Field)`\n  position: relative;\n  width: 100%;\n  padding: 8px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  outline: none;\n  margin-top: 15px;\n\n  :focus {\n    border-color: #007bff;\n    outline: none;\n    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);\n  }\n`;\n\nexport const StyledErrorMessage = styled.div`\n  position: absolute;\n  color: #c82333;\n  font-size: 14px;\n  margin-top: 5px;\n`;\n\nexport const Button = styled.button`\n  background-color: #007bff;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 16px;\n  transition: background-color 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);\n\n  :hover,\n  :focus {\n    background-color: #0055b3;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, ErrorMessage } from 'formik';\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport {\n  StyledForm,\n  Label,\n  Input,\n  Button,\n  StyledErrorMessage,\n} from './ContactsForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().required('It is required field'),\n  number: yup\n    .string()\n    .matches(/^[0-9+ -]+$/, 'Invalid character')\n    .required('It is required field'),\n});\n\nexport default function ContactsForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.selectContacts);\n\n  const handleSubmitForm = ({ name, number }, { resetForm }) => {\n    const sameName = contacts.find(contact => contact.name === name);\n\n    if (sameName) {\n      return Notiflix.Notify.failure(\n        'This contact is already in your phone book'\n      );\n    };\n\n    if (name.trim().length === 0) {\n      return Notiflix.Notify.failure('Please insert contact name');\n    };\n\n    dispatch(contactsOperations.addContact({ name, number }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={handleSubmitForm}\n      validationSchema={schema}\n    >\n      <StyledForm>\n        <Label>\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\">\n            {msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n          </ErrorMessage>\n        </Label>\n\n        <Label>\n          Number\n          <Input type=\"text\" name=\"number\" placeholder=\"Example: 0997755446\" />\n          <ErrorMessage name=\"number\">\n            {msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n          </ErrorMessage>\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\nimport { MdDeleteForever } from 'react-icons/md';\n\nexport const Text = styled.p`\n  margin: 0;\n  font-size: 16px;\n  line-height: 1.5;\n`;\n\nexport const DeleteBnt = styled.button`\n  background-color: transparent;\n  color: #007bff;\n  border: none;\n  cursor: pointer;\n  font-size: 14px;\n  transition: color 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);\n  \n  :hover {\n    color: #c82333;\n  }\n`;\n\nexport const DeleteIcon = styled(MdDeleteForever)`\n  width: 35px;\n  height: 35px;\n`","import { useDispatch } from 'react-redux';\nimport { contactsOperations } from 'redux/contacts';\nimport { Text, DeleteBnt, DeleteIcon } from './Contact.styled';\n\nexport default function Contact({ contact }) {\n  const dispatch = useDispatch();\n\n  const { deleteContact } = contactsOperations;\n  const { name, number, id } = contact;\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <>\n      <div>\n        <Text>{name}</Text>\n        <Text>{number}</Text>\n      </div>\n      <DeleteBnt type=\"button\" onClick={handleDelete}>\n        <DeleteIcon />\n      </DeleteBnt>\n    </>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const StyledList = styled.ul`\n  display: flex;\n  width: 600px;\n  flex-wrap: wrap;\n  gap: 10px;\n  justify-content: space-between;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  align-items: center;\n  padding: 10px;\n  background-color: #f9f9f9;\n  border: 1px solid #ddd;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  width: 290px;\n  box-shadow: 0 0 3px #007bff;\n`;\n","import { useSelector } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts';\nimport Contact from 'components/Contact';\nimport { StyledList, ContactItem } from './ContactsList.styled';\n\nexport default function ContactsList() {\n  const { selectVisibleContacts } = contactsSelectors;\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <StyledList>\n      {contacts.map(contact => (\n        <ContactItem key={contact.id}>\n          <Contact contact={contact} />\n        </ContactItem>\n      ))}\n    </StyledList>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n`;\n\nexport const FilterLabel = styled.label`\n  display: block;\n  color: #0055b3;\n  font-weight: bold;\n`;\n\nexport const FilterInput = styled.input`\n  max-width: 300px;\n  padding: 8px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n\n  :focus {\n    border-color: #007bff;\n    outline: none;\n    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/filter/slice';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { FilterContainer, FilterLabel, FilterInput } from './Filter.styled';\n\nexport default function Filter() {\n  const filterValue = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = evt => {\n    dispatch(changeFilter(evt.target.value));\n  };\n\n  return (\n    <FilterContainer>\n      <FilterLabel htmlFor=\"filter\">Find contact by name</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        id=\"filter\"\n        value={filterValue}\n        onChange={handleFilterChange}\n      />\n    </FilterContainer>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ErrorText = styled.p`\n  color: #c82333;\n  font-size: 25px;\n  text-align: center;\n`;\n","import { ErrorText } from './Error.styled';\n\nexport default function Error({ text }) {\n  return <ErrorText>{text}</ErrorText>;\n};","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 20px;\n  gap: 15px;\n`;\n\nexport const Title = styled.h2`\n  color: #007bff;\n  font-size: 22px;\n  line-height: 40px;\n  font-weight: normal;\n  text-transform: uppercase;\n  font-family: 'Orienta', sans-serif;\n  letter-spacing: 1px;\n  font-style: italic;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelectors, contactsOperations } from 'redux/contacts';\nimport ContactsForm from 'components/ContactsForm';\nimport ContactsList from 'components/ContactsList';\nimport Filter from 'components/Filter';\nimport Loader from 'components/Loader';\nimport Error from 'components/Error';\nimport { Container, Title } from './ContactsPage.styled';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  const { selectContacts, selectIsLoading, selectError } = contactsSelectors;\n  const { fetchContacts } = contactsOperations;\n\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch, fetchContacts]);\n\n  return (\n    <Container>\n      <ContactsForm />\n      <Title>Contacts</Title>\n      <Filter />\n      {contacts.length !== 0 && <ContactsList />}\n      {error && (\n        <Error text={'Something went wrong, please reload this page'} />\n      )}\n      {isLoading && <Loader />}\n    </Container>\n  );\n}\n"],"names":["selectFilter","state","filter","selectContacts","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","Field","_templateObject3","StyledErrorMessage","_templateObject4","Button","_templateObject5","schema","yup","shape","required","number","matches","ContactsForm","dispatch","useDispatch","useSelector","contactsSelectors","_jsx","Formik","initialValues","onSubmit","_ref","_ref2","resetForm","find","Notiflix","trim","length","contactsOperations","validationSchema","children","_jsxs","type","ErrorMessage","msg","placeholder","Text","DeleteBnt","DeleteIcon","MdDeleteForever","Contact","deleteContact","id","_Fragment","onClick","StyledList","ContactItem","ContactsList","map","FilterContainer","FilterLabel","FilterInput","Filter","filterValue","htmlFor","value","onChange","evt","changeFilter","target","ErrorText","Error","text","Container","Title","ContactsPage","fetchContacts","useEffect","Loader"],"sourceRoot":""}